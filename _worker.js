import { connect } from 'cloudflare:sockets'; export default { async fetch(request, env) { try { const userID = env.UUID || 'd342d11e-d424-4583-b36e-524ab1f0afa4', proxyIP = env.PROXYIP || ''; return request.headers.get('Upgrade') === 'websocket' ? handlewsRequest(request, userID, proxyIP) : handlehttpRequest(request, userID); } catch (err) { return new Response(err.toString()); } } }; const handlehttpRequest = (request, userID) => { const path = new URL(request.url).pathname; return path === "/" ? new Response(JSON.stringify(request.cf, null, 4)) : path === `/${userID}` ? new Response(getConfig(userID, request.headers.get("Host")), { headers: { "Content-Type": "text/plain;charset=utf-8" } }) : new Response("Not found", { status: 404 }); }; const handlewsRequest = async (request, userID, proxyIP) => { const [client, webSocket] = new WebSocketPair(); webSocket.accept(); const readableStream = createWebSocketStream(webSocket, request.headers.get('sec-websocket-protocol') || ''); let remoteSocket = { value: null }, udpStreamWrite = null, isDns = false; const processChunk = async chunk => { if (isDns && udpStreamWrite) return udpStreamWrite(chunk); if (remoteSocket.value) return await writeToRemote(remoteSocket.value, chunk); const { hasError, addressRemote, portRemote, rawDataIndex, Version, isUDP } = processWebSocketHeader(chunk, userID); if (hasError) return; const responseHeader = new Uint8Array([Version[0], 0]), rawClientData = chunk.slice(rawDataIndex); isUDP ? (isDns = portRemote === 53, isDns && (udpStreamWrite = await handleUdpRequest(webSocket, responseHeader, rawClientData))) : handleTcpRequest(remoteSocket, addressRemote, portRemote, rawClientData, webSocket, responseHeader, proxyIP); }; readableStream.pipeTo(new WritableStream({ write: processChunk })); return new Response(null, { status: 101, webSocket: client }); }; const writeToRemote = async (socket, chunk) => { const writer = socket.writable.getWriter(); await writer.write(chunk); writer.releaseLock(); }; const handleTcpRequest = async (remoteSocket, addressRemote, portRemote, rawClientData, webSocket, responseHeader, proxyIP) => { try { const tcpSocket = await connectAndWrite(remoteSocket, addressRemote, portRemote, rawClientData); await forwardToData(tcpSocket, webSocket, responseHeader, async () => { const fallbackSocket = await connectAndWrite(remoteSocket, proxyIP || addressRemote, portRemote, rawClientData); fallbackSocket.closed.catch(() => {}).finally(() => closeWebSocket(webSocket)); await forwardToData(fallbackSocket, webSocket, responseHeader); }); } catch { closeWebSocket(webSocket); } }; const connectAndWrite = async (remoteSocket, address, port, rawClientData) => { return remoteSocket.value && !remoteSocket.value.closed ? await writeToRemote(remoteSocket.value, rawClientData) : (remoteSocket.value = await connect({ hostname: address, port }), await writeToRemote(remoteSocket.value, rawClientData), remoteSocket.value); }; const createWebSocketStream = (webSocket, earlyDataHeader) => new ReadableStream({ start(controller) { const { earlyData, error } = base64ToBuffer(earlyDataHeader); if (error) return controller.error(error); earlyData && controller.enqueue(earlyData); webSocket.addEventListener('message', event => controller.enqueue(event.data)); webSocket.addEventListener('close', () => controller.close()); webSocket.addEventListener('error', err => controller.error(err)); }, cancel: () => closeWebSocket(webSocket) }); const processWebSocketHeader = (buffer, userID) => { const view = new DataView(buffer); if (stringify(new Uint8Array(buffer.slice(1, 17))) !== userID) return { hasError: true }; const optLength = view.getUint8(17), command = view.getUint8(18 + optLength), isUDP = command === 2, portRemote = view.getUint16(18 + optLength + 1), addressIndex = 18 + optLength + 3, addressType = view.getUint8(addressIndex), addressLength = addressType === 2 ? view.getUint8(addressIndex + 1) : addressType === 1 ? 4 : 16, addressValueIndex = addressIndex + (addressType === 2 ? 2 : 1), addressValue = addressType === 1 ? Array.from(new Uint8Array(buffer, addressValueIndex, 4)).join('.') : addressType === 2 ? new TextDecoder().decode(new Uint8Array(buffer, addressValueIndex, addressLength)) : Array.from(new Uint8Array(buffer, addressValueIndex, 16)).map(b => b.toString(16).padStart(2, '0')).join(':'); return { hasError: false, addressRemote: addressValue, portRemote, rawDataIndex: addressValueIndex + addressLength, Version: [0], isUDP }; }; const forwardToData = async (remoteSocket, webSocket, responseHeader, retry) => { if (webSocket.readyState !== WebSocket.OPEN) return closeWebSocket(webSocket); let hasData = false; try { const writable = new WritableStream({ write: async chunk => { hasData = true; const data = responseHeader ? new Uint8Array([...responseHeader, ...chunk]) : chunk; webSocket.send(data); responseHeader = null; } }); await remoteSocket.readable.pipeTo(writable); } catch { closeWebSocket(webSocket); } !hasData && retry && retry(); }; const base64ToBuffer = base64Str => { try { const formattedStr = base64Str.replace(/[-_]/g, m => (m === '-' ? '+' : '/')), binaryStr = atob(formattedStr), buffer = Uint8Array.from(binaryStr, char => char.charCodeAt(0)); return { earlyData: buffer.buffer, error: null }; } catch (error) { return { error }; } }; const closeWebSocket = socket => { [WebSocket.OPEN, WebSocket.CLOSING].includes(socket.readyState) && socket.close(); }; const byteToHex = Array.from({ length: 256 }, (_, i) => (i + 256).toString(16).slice(1)); const stringify = (arr, offset = 0) => [4, 2, 2, 2, 6].map(len => Array.from({ length: len }, () => byteToHex[arr[offset++]]).join('')).join('-').toLowerCase(); const handleUdpRequest = async (webSocket, responseHeader, rawClientData) => { const processAndSendChunk = async (chunk, index) => { const udpPacketLength = new DataView(chunk.buffer, index, 2).getUint16(0), dnsResult = await fetch('https://cloudflare-dns.com/dns-query', { method: 'POST', headers: { 'Content-Type': 'application/dns-message' }, body: chunk.slice(index + 2, index + 2 + udpPacketLength) }).then(response => response.arrayBuffer()); if (webSocket.readyState === WebSocket.OPEN) { const combinedData = new Uint8Array([...responseHeader, (dnsResult.byteLength >> 8) & 0xff, dnsResult.byteLength & 0xff, ...new Uint8Array(dnsResult)]); webSocket.send(combinedData); } return index + 2 + udpPacketLength; }; let index = 0; while (index < rawClientData.byteLength) index = await processAndSendChunk(rawClientData, index); }; const getUserConfig = (userID, hostName) => `vless://${userID}@${hostName}:443?encryption=none&security=tls&sni=${hostName}&fp=randomized&type=ws&host=${hostName}&path=%2F%3Fed%3D2560#${hostName}`; 
